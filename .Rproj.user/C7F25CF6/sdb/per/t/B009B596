{
    "collab_server" : "",
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\nlibrary(shiny)\noverview <- read_excel(\"malevsfemale.xlsx\")\nmale <- read_excel(\"men.xlsx\")\nfemale <- read_excel(\"women.xlsx\")\nblack <- read_excel(\"Black.xlsx\")\n\nwhite <- read_excel(\"White.xlsx\")\nlatino <- read_excel(\"HispanicandLatino.xlsx\")\n\nshinyServer(function(input, output) {\n  f2 <- list(\n    family = \"Old Standard TT, serif\",\n    size = 12,\n    color = \"black\"\n  )\n  \n   a <- list(\n    title = \"\",\n    showticklabels = TRUE,\n    tickangle = 10,\n    tickfont = f2,\n    size =1\n  )\n  \n  b<- list(\n    title = \"Count in thousands\",\n    showticklabels = TRUE,\n    tickangle = 45,\n    dtick = 250000\n   \n  )\n  bgraph<- list(\n    title = \"Proportion out of 1\",\n    showticklabels = TRUE,\n    tickangle = 45,\n    dtick = 1\n  )\n  \n  output$copyright <- renderText({\n  \n   return( p(\"Data from\"), p(\"NSF Women, Minorities, and Persons with Disabilities in Science and Engineering Report\" ,style=\"font-style: italic\"))\n    })\n  \n\n \n  \n\n  observe(\n    {\n      createDataFrameBarGender <- function()\n      {\n        labels <- c('Job','Count')\n        job <- male$job\n        cols <- paste(\"y\", input$WhenGender, sep=\"\")\n        countMale <- male[cols]\n        countFemale <- female[cols]\n        \n        total <- countMale + countFemale\n        \n        countMale <- countMale / total\n        countFemale <- countFemale / total\n\n        frame2 <- data.frame(job, countMale,countFemale)\n        \n        \n        names(frame2)[2] <- \"maleCount\"\n        names(frame2)[3] <- \"femaleCount\"\n        return(frame2)\n      }\n      \n      \n      \n      createDataFrame <- function()\n      {\n        labels <- c('Job','Count')\n     job <- white$Job\n         cols <- paste(\"y\", input$When, sep=\"\")\n         \n        countWhite <- white[cols] \n        countBlack <- black[cols]\n        countLatino <- latino[cols]\n        \n        total <-  countWhite + countBlack + countLatino\n        \n        countWhite <- countWhite/total\n        countBlack <- countBlack/total\n        countLatino <- countLatino/total\n        frame1 <- data.frame(job, countWhite,countBlack,countLatino)\n        names(frame1)[2] <- \"whiteCount\"\n        names(frame1)[3] <- \"blackCount\"\n        \n        names(frame1)[4] <- \"latinoCount\"\n        \n        return(frame1)\n      }\n      \n      createSummaryDF <- function()\n      {\n        cols <- paste(\"y\", input$When, sep=\"\")\n        \n        labels <- c('White','Black', \"Hispanic\")\n        whiteTotal <- colSums(white[cols])\n        blackTotal <-colSums(black[cols])\n        hispanicTotal <-colSums(latino[cols])\n        count <- c(whiteTotal,blackTotal,hispanicTotal)\n        frame <- data.frame(\"races\" = labels, \"count\" = count)\n\n        return(frame)\n        \n      }\n      \n      \n      createSummaryGenderDF <- function()\n      {\n        cols <- paste(\"y\", input$WhenGender, sep=\"\")\n        \n        labels <- c('Male','Female')\n        \n        \n        femaleTotal <-colSums(female[cols])\n        maleTotal <- colSums(male[cols])\n     \n        count <- c(maleTotal, femaleTotal)\n        frame <- data.frame( labels,  count)\n        return(frame)\n        \n      }\n      \n      ax <- list(\n        title = \"\",\n        zeroline = FALSE,\n        showline = FALSE,\n        showticklabels = FALSE,\n        showgrid = FALSE\n      )\n      \n      \n      cols <- paste(\"y\", input$When, sep=\"\")\n\n      newFrame <- createDataFrame()\n      \n      \n      output$pie <- renderPlotly({\n        plot_ly(newFrame[newFrame$whiteCount != 0,],type='bar', x=~job, y = ~whiteCount, name=\"White Representation in STEM\"\n\n                ) %>%\n            add_trace(y=~blackCount, name=\"Black Representation in STEM\") %>%\n          add_trace(y=~latinoCount, name=\"Hispanic Representation in STEM\") %>% \n          layout( margin = list(b=50,r=90),xaxis = a, yaxis = bgraph, showlegend = FALSE,barmode = 'stack')\n      \n      })    \n\n      \n      \n      \n      output$pieSum <- renderPlotly({\n        plot_ly(createSummaryDF(),type='pie', labels=~races, values = ~count,\n\n                 textinfo = 'label+percent',\n                insidetextfont = list(color = '#FFFFFF'),\n                hoverinfo = 'text',\n                text = ~paste( count, 'Thousand'),\n                marker = list(colors = colors,\n                              line = list(color = '#FFFFFF', width = 1)),\n                #The 'pull' attribute can also be used to create space between the sectors\n                showlegend = T) %>%\n          layout(margin = list(l = 200,r=200,a=200),xaxis = ax, yaxis = ax)\n        \n        \n      })\n      \n      \n      \n      output$gender <- renderPlotly({\n        plot_ly(createSummaryGenderDF(),type='pie', labels=~labels, values = ~count,\n                \n                textinfo = 'label+percent',\n                insidetextfont = list(color = '#FFFFFF'),\n                hoverinfo = 'text',\n                text = ~paste( count, 'Thousand'),\n                marker = list(colors = colors,\n                              line = list(color = '#FFFFFF', width = 1)),\n                #The 'pull' attribute can also be used to create space between the sectors\n                showlegend = T) %>%\n          layout(xaxis = ax, yaxis = ax)\n        \n        \n      })\n      \n      \n      \n      \n      output$plot <- renderPlotly({\n        plot_ly(createDataFrameBarGender(), x=~job, y = ~femaleCount, type='bar', name='Female')%>%\n          add_trace(y = ~maleCount, name = 'Male') %>% \n          \n          layout(margin = list(b=50,r=90),xaxis = a, yaxis = bgraph, showlegend = FALSE, barmode = 'stack')\n        \n      })\n      \n      createOverviewPie <- function(){\n\n        labels <- c('White','Black', \"Hispanic\", \"Asian\", \"More than one Race\",\"American Indian or Alaska Native\" ,\"Native Hawaiian or Other Pacific Islander\")\n         whiteTotal <- colSums(overview[\"White\"])\n        blackTotal <-colSums(overview[\"Black or African American\"])\n        hispanicTotal <-colSums(overview[\"Hispanic or Latino\"])\n        asianTotal <- colSums(overview[\"Asian\"])\n        moreTotal <- colSums(overview[\"More than one race\"])\n        indianTotal <- colSums(overview[\"American Indian or Alaska Native\"])\n        nativeTotal <- colSums(overview[\"Native Hawaiian or Other Pacific Islander\"])\n        count <- c(whiteTotal,blackTotal,hispanicTotal,asianTotal,moreTotal,indianTotal,nativeTotal)\n        \n        frame <- data.frame(\"races\" = labels, \"count\" = count)\n        return(frame)\n        \n        }\n      createOverviewData <- function(){\n        \n        labels <- c('Job','Count')\n        job <- overview$`job`\n        overview$White <- overview$White / overview$Total\n        overview$`Hispanic or Latino` <- overview$`Hispanic or Latino` / overview$Total\n        overview$`Asian` <- overview$`Asian` / overview$Total\n        overview$`Black or African American` <- overview$`Black or African American` / overview$Total\n        overview$`More than one race` <- overview$`More than one race` / overview$Total\n        \n        \n        overview$`American Indian or Alaska Native` <- overview$`American Indian or Alaska Native` / overview$Total\n        overview$`Native Hawaiian or Other Pacific Islander` <- overview$`Native Hawaiian or Other Pacific Islander` / overview$Total\n        \n\n        frame1 <- data.frame(job, overview$White,overview$`Hispanic or Latino`, overview$`Black or African American`,overview$`Asian`,overview$`American Indian or Alaska Native`,overview$`More than one race`,   overview$`Native Hawaiian or Other Pacific Islander`)\n         names(frame1)[2] <- \"whiteCount\"\n        names(frame1)[3] <- \"latinoCount\"\n        \n        names(frame1)[4] <- \"blackCount\"\n        names(frame1)[5] <- \"asianCount\"\n        names(frame1)[6] <- \"nativeCount\"\n        names(frame1)[7] <- \"moreCount\"\n        names(frame1)[8] <- \"islandCount\"\n\n        return(frame1)\n      }\n      \n      output$overviewBar <- renderPlotly({\n        plot_ly(createOverviewData(),type='bar', x=~job, y = ~whiteCount, name=\"White Representation in STEM\"\n                \n        ) %>%\n          add_trace(y=~asianCount, name=\"Asian Representation in STEM\") %>% \n          add_trace(y=~blackCount, name=\"Black Representation in STEM\") %>%\n          add_trace(y=~latinoCount, name=\"Hispanic Representation in STEM\") %>% \n          add_trace(y=~moreCount, name=\"More than one Race Representation in STEM\") %>% \n          add_trace(y=~nativeCount, name=\"American Indian or Alaska Native Representation in STEM\") %>% \n          add_trace(y=~islandCount, name=\"Native Hawaiian or Other Pacific Islander Representation in STEM\") %>%\n          layout(margin = list(b=50,r=50),xaxis = a, yaxis = bgraph, showlegend = FALSE,barmode = 'stack')\n        \n      })\n      \n      output$overviewSum<- renderPlotly({\n        a<- plot_ly(createOverviewPie(),type='pie', labels=~races, values = ~count,\n                \n                textinfo = 'label+percent',\n                insidetextfont = list(color = '#FFFFFF'),\n                hoverinfo = 'text',\n                marker = list(colors = colors,\n                              line = list(color = '#FFFFFF', width = 1)),\n                #The 'pull' attribute can also be used to create space between the sectors\n                showlegend = T) %>%\n          layout(margin = list(l = 200,r=200,a=200), legend = list(x = 0.1, y = 4), xaxis = ax, yaxis = ax)\n        \n      \n        \n      })\n\n    })\n\n})\n",
    "created" : 1487557177967.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "134487663",
    "id" : "B009B596",
    "lastKnownWriteTime" : 1488918817,
    "last_content_update" : 1488918817707,
    "path" : "~/Desktop/R/Zine/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}